#suite DETERMINANT

#test s21_determinant_16
  // failure with non-square matrix
  matrix_t A ;
  double det = 0;
  s21_create_matrix(3, 2, &A);
  s21_fill_matrix(&A, 1, 1);
  ck_assert_int_eq(s21_determinant(&A, &det), ERROR_CALCULATION);
  s21_remove_matrix(&A);


#test s21_determinant_17
  // success with task reference values
  matrix_t A ;
  double det = 0;
  s21_create_matrix(3, 3, &A);
  s21_fill_matrix(&A, 1, 1);
  ck_assert_int_eq(s21_determinant(&A, &det), OK);
  ck_assert_double_eq(det, 0);
  s21_remove_matrix(&A);


#test s21_determinant_18
  // success with 2x2 matrix
  matrix_t A ;
  double det = 0;
  s21_create_matrix(2, 2, &A);
  s21_fill_matrix(&A, 3, 3);
  ck_assert_int_eq(s21_determinant(&A, &det), OK);
  ck_assert_double_eq(det, -18);
  s21_remove_matrix(&A);


#test s21_determinant_19
  // success with 1x1 matrix
  matrix_t A ;
  double det = 0;
  s21_create_matrix(1, 1, &A);
  A.matrix[0][0] = 21;
  ck_assert_int_eq(s21_determinant(&A, &det), OK);
  ck_assert_double_eq(det, 21);
  s21_remove_matrix(&A);

#test s21_determinant_20
  int rows = 1;
  int columns = 1;
  matrix_t A = {0};
  s21_create_matrix(rows, columns, &A);
  A.matrix[0][0] = 5;
  double det = 5;
  double res = 0;
  int ret = s21_determinant(&A, &res);
  ck_assert_int_eq(0, ret);
  ck_assert_double_eq(res, det);
  s21_remove_matrix(&A);

#test s21_determinant_21
  int rows = 2;
  int columns = 2;
  matrix_t A = {0};
  s21_create_matrix(rows, columns, &A);
  A.matrix[0][0] = 5;
  A.matrix[0][1] = 1;
  A.matrix[1][0] = 4;
  A.matrix[1][1] = 7;
  double det = 31;
  double res = 0;
  int ret = s21_determinant(&A, &res);
  ck_assert_int_eq(0, ret);
  ck_assert_double_eq(res, det);
  s21_remove_matrix(&A);

#test s21_determinant_22
  int rows = 3;
  int columns = 3;
  matrix_t A = {0};
  s21_create_matrix(rows, columns, &A);
  A.matrix[0][0] = 5;
  A.matrix[0][1] = 1;
  A.matrix[0][2] = 1;
  A.matrix[1][0] = 4;
  A.matrix[1][1] = 7;
  A.matrix[1][2] = 5;
  A.matrix[2][0] = 3;
  A.matrix[2][1] = 3;
  A.matrix[2][2] = 4;
  double det = 55;
  double res = 0;
  int ret = s21_determinant(&A, &res);
  ck_assert_int_eq(0, ret);
  ck_assert_double_eq(res, det);
  s21_remove_matrix(&A);

#test s21_determinant_23
  int rows = 4;
  int columns = 4;
  matrix_t A = {0};
  s21_create_matrix(rows, columns, &A);
  A.matrix[0][0] = 1;
  A.matrix[0][1] = 1;
  A.matrix[0][2] = 1;
  A.matrix[0][3] = 5;
  A.matrix[1][0] = 6;
  A.matrix[1][1] = 7;
  A.matrix[1][2] = 8;
  A.matrix[1][3] = 6;
  A.matrix[2][0] = 3;
  A.matrix[2][1] = 2;
  A.matrix[2][2] = 3;
  A.matrix[2][3] = 3;
  A.matrix[3][0] = 0;
  A.matrix[3][1] = 2;
  A.matrix[3][2] = 0;
  A.matrix[3][3] = 2;
  double det = -44;
  double res = 0;
  int ret = s21_determinant(&A, &res);
  ck_assert_int_eq(0, ret);
  ck_assert_double_eq(res, det);
  s21_remove_matrix(&A);

#test s21_determinant_24
  int rows = rand() % 10 + 1;
  matrix_t A = {0};
  s21_create_matrix(rows, rows, &A);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < rows; j++) {
      A.matrix[i][j] = 4;
    }
  }
  double det = 5;
  double res = 0;
  int ret = s21_determinant(&A, &res);
  ck_assert_int_eq(0, ret);
  ck_assert_double_ne(res, det);
  s21_remove_matrix(&A);

#test s21_determinant_25
  int rows = rand() % 100 + 1;
  matrix_t A = {0};
  s21_create_matrix(rows, rows + 1, &A);
  double res = 0;
  int ret = s21_determinant(&A, &res);
  ck_assert_int_eq(2, ret);
  s21_remove_matrix(&A);

#test s21_determinant_26
  int rows = rand() % 100 + 1;
  matrix_t A = {0};
  s21_create_matrix(rows, 0, &A);
  double res = 0;
  int ret = s21_determinant(&A, &res);
  ck_assert_int_eq(1, ret);
  s21_remove_matrix(&A);

#test s21_determinant_27
  matrix_t matrix;
  s21_create_matrix(3, 3, &matrix);
  int count = 1;
  for (int i = 0; i < matrix.rows; i++) {
    for (int j = 0; j < matrix.columns; j++) {
      matrix.matrix[i][j] = count++;
    }
  }
  matrix.matrix[2][2] = 10;
  double res, ref = -3.0;
  int ret = s21_determinant(&matrix, &res);
  ck_assert_double_eq(res, ref);
  ck_assert_int_eq(ret, 0);
  s21_remove_matrix(&matrix);